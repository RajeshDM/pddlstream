(define (domain blocksworld)
  (:requirements :strips :equality)
  (:predicates (Clear ?x)
               (OnTable ?x)
               ;(arm-empty)
               (On ?x ?y)
                (Conf ?q)
                (Block ?b)
                (Pose ?p)
                (Kin ?q ?p)
                (AtPose ?p ?q)
                (AtConf ?q)
                (Holding ?b)
                (HandEmpty)
                (CFree ?p1 ?p2)
                (Unsafe ?p)
                (CanMove)
                )

  (:action move
    :parameters (?q1 ?q2)
    :precondition (and (Conf ?q1) (Conf ?q2)
                       (AtConf ?q1) (CanMove))
    :effect (and (AtConf ?q2)
                 (not (AtConf ?q1)) (not (CanMove))
                 (increase (total-cost) (Distance ?q1 ?q2)))
  )
  ;(:action pickup
  ;  :parameters (?ob)
  ;  :precondition (and (Clear ?ob) (OnTable ?ob) (arm-empty))
  ;  :effect (and (Holding ?ob) (not (Clear ?ob)) (not (OnTable ?ob))
  ;               (not (arm-empty))))

  (:action pickup
    :parameters (?b ?p ?q)
    :precondition (and (Block ?b) (Clear ?b) (Kin ?q ?p) (OnTable ?b)
                       (AtConf ?q) (AtPose ?b ?p) (HandEmpty))
    :effect (and (Holding ?b) (CanMove) (not (Clear ?b)) (not (OnTable ?b))
                 (not (AtPose ?b ?p)) (not (HandEmpty))
                 (increase (total-cost) 1))
  )
  ;(:action putdown
  ; :parameters  (?ob)
  ;  :precondition (and (Holding ?ob))
  ;  :effect (and (Clear ?ob) (arm-empty) (OnTable ?ob)
  ;               (not (Holding ?ob))))
  (:action putdown
    :parameters (?b ?p ?q)
    :precondition (and (Block ?b) (Kin ?q ?p)
                       (AtConf ?q) (Holding ?b) (not (Unsafe ?p)))
    :effect (and (AtPose ?b ?p) (HandEmpty) (CanMove)
                 (not (Holding ?b)) (Clear ?b) (OnTable ?b)
                 (increase (total-cost) 1))
  )

  (:action stack
    :parameters  (?ob ?underob ?pose_ub ?q)
    :precondition (and  (Clear ?underob) (Holding ?ob) (AtPose ?underob pose_ub)
                    AtConf ?q)
    :effect (and (HandEmpty) (Clear ?ob) (On ?ob ?underob)
                 (not (Clear ?underob)) (not (Holding ?ob))))

  (:action unstack
    :parameters  (?ob ?underob ?pose_ub ?q)
    :precondition (and (On ?ob ?underob) (Clear ?ob) (AtPose ?underob ?pose_ub)
                    (AtConf ?q)(HandEmpty))
    :effect (and (Holding ?ob) (Clear ?underob)
                 (not (On ?ob ?underob)) (not (Clear ?ob)) (not (HandEmpty))))
  (:derived (Unsafe ?p)
    (exists (?b2 ?p2) (and (Pose ?p) (Block ?b2) (Pose ?p2)
                          (not (CFree ?p ?p2))
                          (AtPose ?b2 ?p2)))
  )
  )
