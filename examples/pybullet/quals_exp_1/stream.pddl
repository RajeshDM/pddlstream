(define (stream pr2-tamp)
  ;(:stream sample-pose
  ;  :inputs (?o ?r)
  ;  :domain (Stackable ?o ?r)
  ;  :outputs (?p)
  ;  :certified (and (Pose ?o ?p) (Supported ?o ?p ?r))
  ;)
  (:stream sample-pose
    :inputs (?o ?p1)
    :domain (and (Pose ?o ?p1) (Pickable ?o))
    :outputs (?p2)
    :certified  (Pose ?o ?p2)
    ;:certified  ()
  )
  ;(:stream certify-movable-position-with-pose
  ;  :inputs (?o ?p ?q)
  ;  :domain (MovableConf ?o ?q)
  ;  :outputs ()
  ;  :certified (NoAgentObjectCollision ?o ?p ?q)
  ; )
  ;(:stream sample-grasp
  ;  :inputs (?o)
  ;  :domain (Graspable ?o)
  ;  :outputs (?g)
  ;  :certified (Grasp ?o ?g)
  ;)
  (:stream sample-openable-point-near-object
    :inputs (?o ?p)
    :domain (and (Pose ?o ?p) (Openable ?o))
    :outputs (?q)
    :certified (and (BConf ?q) (OpenableConf ?o ?q))
    ;:certified (BConf ?q)
  )
  (:stream sample-pickable-point-near-object
    :inputs (?o ?p)
    :domain (and (Pose ?o ?p) (Pickable ?o))
    :outputs (?q)
    :certified (and (BConf ?q) (PickableConf ?o ?q ?p))
    ;:certified (BConf ?q)
  )
  (:stream sample-droppable-point-near-object
    :inputs (?o ?p)
    ;:domain (AtPose ?o ?p)
    :domain (and (Pose ?o ?p) (Pickable ?o))
    :outputs (?q)
    :certified (and (BConf ?q) (DroppableConf ?o ?q ?p))
    ;:certified (BConf ?q)
  )
  ;(:stream test-cfree-pose
  ;  :inputs (?o1 ?p1 ?o2 ?p2)
  ;  :domain (and (Pose ?o1 ?p1) (Pose ?o2 ?p2))
  ;  :certified (CFree ?p1 ?p2)
  ;)
  (:stream test-cfree-object-pose
    :inputs (?o1 ?p1 ?o2 ?p2)
    :domain (and (Pose ?o1 ?p1) (Pose ?o2 ?p2))
    ;:domain (Pose ?o1 ?p1)
    ;:domain (Pose ?o2 ?p2)
    :certified (CFreeObjectPose ?o1 ?p1 ?o2 ?p2)
  )

  ;(:stream inverse-kinematics
  ;  :inputs (?a ?o ?p ?g)
  ;  :domain (and (Controllable ?a) (Pose ?o ?p) (Grasp ?o ?g))
  ;  :outputs (?q ?t)
  ;  :certified (and (BConf ?q) (ATraj ?t) (Kin ?a ?o ?p ?g ?q ?t))
  ;)
  (:stream plan-base-motion
    :inputs (?q1 ?q2)
    :domain (and (BConf ?q1) (BConf ?q2))
    :outputs (?t)
    :certified (and (BTraj ?t) (BaseMotion ?q1 ?t ?q2))
  )
  (:stream test-cfree-traj-pose
    :inputs (?t ?o ?p)
    :domain (and (BTraj ?t) (Pose ?o ?p))
    :certified (CFreeTrajPose ?t ?o ?p)
  )

  ;(:stream test-cfree-traj-pose
  ;  : inputs (?t ?o ?p)
  ;  : domain (and (BTraj ?t) (Pose ?o ?p))
  ;  : certified (CFreeTrajPose ?t ?o ?p)
  ;)

  (:function (MoveCost ?t)
    (and (BTraj ?t))
  )
  (:predicate (TrajPoseCollision ?t ?o2 ?p2)
    (and (BTraj ?t) (Pose ?o2 ?p2))
  )
  (:predicate (TrajArmCollision ?t ?a ?q)
    (and (BTraj ?t) (AConf ?a ?q))
  )
  (:predicate (TrajGraspCollision ?t ?a ?o ?g)
    (and (BTraj ?t) (Arm ?a) (Grasp ?o ?g))
  )
)